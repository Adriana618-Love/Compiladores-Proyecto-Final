S ::= code $

code ::= statement code_p
code_p ::= statement code_p
code_p ::= lambda

statement ::= bucle
statement ::= conditional
statement ::= declaration endline
statement ::= assigment endline
statement ::= expression endline
statement ::= other_statement endline

other_statement ::= Print ( expression )

bucle ::= while ( expression ) { code }

conditional ::= if ( expression ) { code } conditional_p
conditional_p ::= else { code }
conditional_p ::= lambda

declaration ::= d_number variable ( expression )
declaration ::= d_string variable ( expression )
declaration ::= d_video variable ( expression )

assigment ::= set variable ( expression )

expression ::= ( expression )
expression ::= variable expression_variable expression_p
expression_variable = . expression_variable_p
expression_variable_p ::= subclip ( expression , expression )
expression_variable_p ::= set_start ( expression )
expression_variable_p ::= volumex ( expression )
expression_variable ::= lambda
expression ::= number expression_p
expression ::= string expression_p
expression ::= VideoFileClip ( expression , expression ) expression_p
expression ::= ImageClip ( expression , expression ) expression_p
expression_p ::= operator expression
expression_p ::= lambda

extended_variable

operator ::= +
operator ::= -
operator ::= *
operator ::= /
operator ::= <
operator ::= >
operator ::= .
operator ::= <=
operator ::= >=
operator ::= ==

endline ::= ;
